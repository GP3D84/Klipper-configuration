WORK IN PROGRESS


[gcode_macro M106]
gcode:
    {% set fan = 'fan' + (params.P|int if params.P is defined else 0)|string %}
    {% set speed = (params.S|float / 255 if params.S is defined else 1.0) %}
    SET_FAN_SPEED FAN={fan} SPEED={speed}




[gcode_macro M190]  # SET BED TEMP
rename_existing: M99190
gcode:
    #Parameters
    {% set s = params.S|float %}

    M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}   ; Set bed temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s-10} MAXIMUM={s+10}  ; Wait for bed temp (within 1 degree)
    {% endif %}


[gcode_macro _MULTY_BED_SETTINGS]
description: This macro contains all settings for Multy Beds 

variable_bed1: [0, 0, 100, 100]
variable_bed2: [100, 0, 200, 100]
variable_bed3: [0, 100, 100, 200]
variable_bed4: [100, 100, 200, 200]

gcode:
    


# M140  M190 wait
[gcode_macro M140]
gcode:

    {% set s = params.S|float %}

    {% set multy_bed_settings = printer["gcode_macro _MULTY_BED_SETTINGS"] %} 
    {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
    {% set x_min = all_points | map(attribute=0) | min %}
    {% set y_min = all_points | map(attribute=1) | min %}
    {% set x_max = all_points | map(attribute=0) | max %}
    {% set y_max = all_points | map(attribute=1) | max %}
    
    # Define heatbed regions from _MULTY_BED_SETTINGS
    {% set heatbed1 = multy_bed_settings.bed1 %}
    {% set heatbed2 = multy_bed_settings.bed2 %}
    {% set heatbed3 = multy_bed_settings.bed3 %}
    {% set heatbed4 = multy_bed_settings.bed4 %}
    
    # Initialize heatbed activation list
    {% set heatbeds_to_activate = [] %}
    
    # Check if object overlaps with heatbed1
    {% if x_min < heatbed1[2] and x_max > heatbed1[0] and y_min < heatbed1[3] and y_max > heatbed1[1] %}
        {% do heatbeds_to_activate.append(0) %}
    {% endif %}
    
    # Check if object overlaps with heatbed2
    {% if x_min < heatbed2[2] and x_max > heatbed2[0] and y_min < heatbed2[3] and y_max > heatbed2[1] %}
        {% do heatbeds_to_activate.append(1) %}
    {% endif %}
    
    # Check if object overlaps with heatbed3
    {% if x_min < heatbed3[2] and x_max > heatbed3[0] and y_min < heatbed3[3] and y_max > heatbed3[1] %}
        {% do heatbeds_to_activate.append(2) %}
    {% endif %}
    
    # Check if object overlaps with heatbed4
    {% if x_min < heatbed4[2] and x_max > heatbed4[0] and y_min < heatbed4[3] and y_max > heatbed4[1] %}
        {% do heatbeds_to_activate.append(3) %}
    {% endif %}
    
    # Set bed temperature for the active heatbeds
    {% for heatbed in heatbeds_to_activate %}
        {% set bed = 'heatbed' + (heatbed|string %}
            SET_HEATER_TEMPERATURE HEATER={bed} S={params.S}
        {% endif %}
    {% endfor %}
