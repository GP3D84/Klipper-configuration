

#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
[gcode_macro PRINT_END]
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-5.0 F1800                 ; retract filament
    
    TURN_OFF_HEATERS
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                     ; turn off fan
    
    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END

[delayed_gcode _START_PRINTER]
# description: The macros when start the printer
initial_duration: 2.0
gcode:  

    M117 Klipper Troodon 2.0
    
    # WEBCAM_ON

    BACKUP_MOVE
    # Filament_Encoder_OFF
    # SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0   # Enable Filament Sensor after purge line
    
    
    {% if printer.bed_mesh.profiles.bed %}
    BED_MESH_PROFILE LOAD=bed
    {% else %}
    M118 Bed Mesh "bed" not present
    {% endif %}
    
    SET_VELOCITY_LIMIT ACCEL_TO_DECEL=6000
    SET_VELOCITY_LIMIT ACCEL=12000
    SET_VELOCITY_LIMIT VELOCITY=300
    # BL_TEST
    
    # SET_PIN PIN=LED_Strip VALUE=5 # Set Led Strip 5%
    {% if printer['gcode_macro LED_ON'] is defined %}
      LED_ON
    {% endif %}
           
    # TIMER_OFF # Disable Timeout
        
    # SET_BED_TEMP_TO_SENSOR # set the bed temperature as the temp measured at boot


[gcode_macro START_PRINT]  # Recall as "FIRST" START PRINT MACRO in the Slicer
description: The macros when start a print
gcode:

    M117 START PRINTING...
    {% if printer['gcode_macro LED_cooling'] is defined %}
      LED_cooling
    {% endif %}


    {% set macro = printer['gcode_macro _MACRO_VARIABLE']|default({}) %}
    EXHAUST_FAN_OFF
    
    # SAVE_VARIABLE VARIABLE=power_resume_z VALUE=0  # PLR
    # TIMER_OFF
    CLEAR_PAUSE
    
    # RUN_SHELL_COMMAND CMD=LOG_CPU_START
    
    # SAVE_LAST_FILE   # PLR - Recall as last MACRO in slicer: needed to generate PLR gcode without purge column in the Start Gcode of slicer

        
    # Filament_Encoder_OFF   # Disable Filament Sensor for purge line  
    # SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0


    {% if printer['gcode_macro LED_homing'] is defined %}
      LED_homing
    {% endif %}
    
    # PRECISE_HOMING
    
    # G32  # G28 + QUAD GANTRY
    HOMING_IF_NOT
    QUAD_GANTRY_LEVEL
    G28 Z # For Z_OFFSET
    NOZZLE_CLEAN



    M117 HEATING...
    {% if printer['gcode_macro LED_heating'] is defined %}
      LED_heating
    {% endif %}
    # ORCA SLICER  # MACHINE START G-CODE
    # START_PRINT EXTRUDER_TEMP=[nozzle_temperature_initial_layer] BED_TEMP=[bed_temperature_initial_layer_single]
    {% set BED_TEMP = params.BED_TEMP|default(70)|int %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(225)|int %}
    
    # Heat nozzle for probing
    M104 S{EXTRUDER_TEMP}
    # Heat bed for probing
    M140 S{BED_TEMP}
    
 
    # PARK FOR HEATING
    _TOOLHEAD_PARK_PAUSE_CANCEL
    # G1 X0 Y0 Z5 F{macro.speed_move*60}
    
    # Heat nozzle for probing
    M109 S{EXTRUDER_TEMP}
    # Heat bed for probing
    M190 S{BED_TEMP}

    # NOZZLE_CLEAN
    # MESH_PRINT # Full Mesh

    
#  ███╗   ███╗███████╗███████╗██╗  ██╗
#  ████╗ ████║██╔════╝██╔════╝██║  ██║
#  ██╔████╔██║█████╗  ███████╗███████║
#  ██║╚██╔╝██║██╔══╝  ╚════██║██╔══██║
#  ██║ ╚═╝ ██║███████╗███████║██║  ██║
#  ╚═╝     ╚═╝╚══════╝╚══════╝╚═╝  ╚═╝
#     
    BED_MESH_CALIBRATE   # KAMP
    
    NOZZLE_PRIME  # Line purge
    LINE_PURGE  # KAMP purge
    NOZZLE_CLEAN

    
    
    # PURGE_LOAD_FILAMENT
    # PURGE_LINE

    # LAST_START_PRINT ; Enable PLR, Encoder etc

    {% if printer['gcode_macro LED_printing'] is defined %}
      LED_printing
    {% endif %}
    M117 PRINTING...

[gcode_macro LAST_START_PRINT]
description: The last macros after START_PRINT
gcode:
    {% set macro = printer['gcode_macro _MACRO_VARIABLE']|default({}) %}
    # Filament_Encoder_ON   # Enable Filament Sensor
    # SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1
    

[gcode_macro PURGE_LOAD_FILAMENT]
gcode:
    {% set macro = printer['gcode_macro _MACRO_VARIABLE']|default({}) %}
    M118 Purging...
    M117 Purging...    
    # LOAD FILAMENT
    G90
    G92 E0 
    G1 X{macro.purge_park_x} Y{macro.purge_park_x}
    G1 E{macro.start_purge_long_lenght} F{macro.start_purge_long_speed}
    G92 E0
    G4 P4000
    G1 E{macro.start_purge_short_lenght} F{macro.start_purge_short_speed}
    G92 E0
    G11
    G11
    G1 E-3 F{macro.start_purge_long_speed}
    G92 E0

[gcode_macro PURGE_LINE]
gcode:
    {% set macro = printer['gcode_macro _MACRO_VARIABLE']|default({}) %}
    M118 Purging...
    M117 Purging...

    # PURGE LINE
    G1 Z1 F5000
    # SET_VELOCITY_LIMIT ACCEL=500 ACCEL_TO_DECEL=250
    G90
    G1 Z1
    G92 E0 
    M83
    G1 X0 Y0 F12000
    G1 Z.32
    G1 F2400
    G1 X275 Y0 E15
    G92 E0
    G1 Z.64
    G1 X1 Y0 E12 F12000
    G1 Z0
    G92 E0 
    G11
    G1 Z3 F3000
    G92 E0 

[gcode_macro MESH_PRINT]
gcode:
    # Mesh for print
    # Set Accel for Bed Mesh
    SET_VELOCITY_LIMIT ACCEL=3000
    SET_VELOCITY_LIMIT ACCEL_TO_DECEL=3000
    M118 MESH Temp
    M117 MESH Temp
    
    {% if not printer.bed_mesh.profiles.print %}
    BED_MESH_CALIBRATE PROFILE="print"
    {% else %}
    M118 Bed Mesh "print" present
    M117 Bed Mesh "print" present
    {% endif %}




[gcode_macro END_PRINT]  # Recall as END PRINT MACRO in the Slicer
description: The macros when end a print
gcode:
    {% set macro = printer['gcode_macro _MACRO_VARIABLE']|default({}) %}
    M117 PRINT ENDING...

    
    M118 Z SAFE
    Z_SAFE ; Raise Z more
    _TOOLHEAD_PARK_PAUSE_CANCEL
    
    # Short Retract
    M118 Short retract
    G91 ; Relative positioning
    # Retract short
    G1 E-{macro.start_purge_short_lenght} F{macro.start_purge_short_speed}
    G10 ; Firmware Retraction
    G92 E0
    
    

    ; Go to center
    M118 Go to center
    {% set x_med = printer.toolhead.axis_maximum.x / 2 %}
    {% set y_med = printer.toolhead.axis_maximum.x / 2 %}
    G90
    G1 X{macro.cooling_park_x} Y{macro.cooling_park_x} F{macro.speed_move*6}

  
    # Cooldown 20%
    # M118 Cooling at center
    # M106 S26 ; Fan 10%
    
    G4 P1000  ; pause between retractions 

    M118 Long retract
    # Retract long 
    G1 E-{macro.start_purge_long_lenght} F{macro.start_purge_long_speed}

    # Cooldown
    M118 Turn Off Heaters
    TURN_OFF_HEATERS
    #  M106 S51 ; Fan 20%
    
    Z_SAFE Z=2    
    
    
    #  M106 S102 ; Fan 40%

    M118 Motor OFF
    SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0
    M18 ; Klipper disables All Motors 
    M84 ; Klipper disables All Motors

    
 
    # TIMELAPSE_RENDER  ; Webcam
    # G4 P10000  ; pause cooldown 
    
    M107 ; Turn-off fan
    
    # SET_FAN_SPEED FAN=RSCS SPEED=0
    # end_tune ; Beeper


    # Remove Mesh "print"
     BED_MESH_PROFILE REMOVE="kamp"
    
    # clear_last_file   # PLR
    
    
    # RUN_SHELL_COMMAND CMD=LOG_CPU_STOP
    # WEBCAM_OFF
    
#   {% if printer.configfile.save_config_pending|lower == 'true' or printer["gcode_macro global"].restart_inpending|lower == 'true'  %}
    
    
    BACKUP_MOVE

    # M118 Clean Air
    # EXHAUST_FAN_ON
    EXHAUST_FAN_ON EXHAUST_TIME_MIN=1

    M117 PRINT END!
    M118 PRINT END!
    # TIMER_ON
    
    {% if printer['gcode_macro LED_print_end'] is defined %}
      LED_print_end
    {% endif %}
    
    # SAVE_VARIABLE VARIABLE=dariavviare VALUE=1  # PLR
    
    LAST_END_PRINT
    

[gcode_macro LAST_END_PRINT]
description: The last macros after START_PRINT
gcode:
    {% set macro = printer['gcode_macro _MACRO_VARIABLE']|default({}) %}
    # Filament_Encoder_ON   # Enable Filament Sensor
    # SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1
    # SAVE_PENDING
