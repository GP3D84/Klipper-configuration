
# Source https://www.orbiterprojects.com/orbiter-filament-sensor/?spm=a2g0o.detail.1000023.95.247cPEirPEir0t

#################################################################################################################
################################# Orbiter Sensor CONFIGURATION ##################################################
#################################################################################################################

[respond]
default_type: echo

[force_move]
enable_force_move: True

[gcode_macro _ATTEMPTS_VARIABLES] 
variable_attempts: 1
gcode:
   M118 Attempt is {attempts}

[gcode_macro runnout_init]
gcode:
    M118 Attempt is {printer['gcode_macro _ATTEMPTS_VARIABLES'].attempts}
   
    {% set sensor = printer['gcode_macro _SENSOR_VARIABLES'] %}  
    {% set attempts = printer['gcode_macro _ATTEMPTS_VARIABLES'] %} 
   # M118 {printer'gcode_macro _attempts'].attempts}
    {% if (sensor.enable_beep|lower == 'true') %} 
      M300 # beep sound
    {% endif %}

    {% if (printer.print_stats.state != "printing") %}
    M118 Not Printing, OK
        {% if (sensor.enable_attempts_purge|lower == 'true') and (attempts.attempts <= sensor.attempts_purge) %}
          M118 Attempt to purge
          attemp_purge # Purge instead runnout
          M118 Runnout avoided with purge
          M118 Print resumed
          RESUME
        {% else %}
            {% if(sensor.disable_runnout|lower == 'false') %}
            M118 Filament terminated or clogged!
              filament_change_state1
              M118 Ready to change filament!
            {% else %}
              M118 Filament runnout is disabled in the sensor config file! 
              M117 Filament runnout is disabled in the sensor config file! 
            {% endif %}  
        {% endif %}  
    {% else %} # ELSE if paused
       M118 Can't purge now. Printing!
    {% endif %}  # END if paused
    UPDATE_DELAYED_GCODE ID=clear_loadbusy DURATION=2
    UPDATE_DELAYED_GCODE ID=clear_unloadbusy DURATION=2    
    SET_GCODE_VARIABLE MACRO=filament_unload VARIABLE=filamentpresent VALUE=0


[gcode_macro attemp_purge]
variable_USER_TEMP: 0
variable_LOAD_TEMP: 0
gcode:
    M118 Attempt is {printer['gcode_macro _ATTEMPTS_VARIABLES'].attempts}
    {% set sensor = printer['gcode_macro _SENSOR_VARIABLES'] %}  
    {% set attempts = printer['gcode_macro _ATTEMPTS_VARIABLES'] %} 
    {% set USER_TEMP = printer.extruder.target %} # save user set temperature before loading
    {% set LOAD_TEMP = 0 %} 
    
    M118 USER TEMP {USER_TEMP}      # echo back for debug only      
    M117 USER TEMP {USER_TEMP}      # echo back for debug only   
    M118 LOAD_TEMP {USER_TEMP}      # echo back for debug only      
    M117 LOAD_TEMP {USER_TEMP}      # echo back for debug only  
    
    {% if (printer.extruder.target < sensor.attempts_temp) %} # checking for extrusion temperature
        M118 USER TEMP < ATTEMPTS TEMP
        {% set LOAD_TEMP = sensor.attempts_temp %} # save user set temperature before loading 
        M118 SET TEMP TO ATTEMPTS TEMP
        SET_HEATER_TEMPERATURE HEATER=extruder TARGET={LOAD_TEMP} # set user defined load temperature
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={LOAD_TEMP} # wait for reaching set temperature         
    {% else %}
        M118 USER TEMP >= ATTEMPTS TEMP
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={USER_TEMP}
    {% endif %} 
    M118 Go to Z safe position 
    M117 Go to Z safe position 
    FILAMENT_Z_SAFE  # G1 Z(attempts_park_lift_z) in safe coordinate
    G91
    G1 X{sensor.attempts_park_position_x} Y{sensor.attempts_park_position_y} # Go to Park position to purge
    G90
    {% if (printer.extruder.can_extrude|lower != 'true')%} # last check for minimum extrusion temperature    
    G91   
    M118 Purging! 
    M117 Purging!
    G1 E{sensor.attempts_purge_length} F{sensor.attempts_purge_speed} # extrude preconfigured purge length 
    G90 
    
    {% else %}
        M118 Error: the 'attempts_temp' is below 'minimum extrusion temp'
        M117 Error: the 'attempts_temp' is below 'minimum extrusion temp'
    {% endif %}  
    M118 RESTORE TEMP to {USER_TEMP} (USER TEMP)
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={USER_TEMP} # restore user temp
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={USER_TEMP}      # wait for user temp
    {% set new_attempts = attempts.attempts + 1 %}
    SET_GCODE_VARIABLE MACRO=_ATTEMPTS_VARIABLES VARIABLE=attempts VALUE={new_attempts} # increment attemps
    M118 Attempt is incremented to {printer['gcode_macro _ATTEMPTS_VARIABLES'].attempts}
      

[gcode_macro filament_change_state1]
variable_changebusy: 0
variable_temp_target: 0
gcode:
  # SET_GCODE_VARIABLE MACRO=_ATTEMPTS_VARIABLES VARIABLE=attempts VALUE=1 # Reset Attempts counter
  UPDATE_DELAYED_GCODE ID=clear_unloadbusy DURATION=2 
  {% set sensor = printer['gcode_macro _SENSOR_VARIABLES'] %}  
  {% if changebusy == 0 %}
    PAUSE # call printer pause macro      
    SET_GCODE_VARIABLE MACRO=filament_change_state1 VARIABLE=changebusy VALUE=1       
    M118 Filament runnout!       
    M117 Filament runnout!       
    filament_change_state2     # comment this line if you do not want to automatically unload filament in case there is a runnout detected.
  {% else %}
  {% endif %}

[gcode_macro filament_change_state2] # auto unload filament
gcode:
    {% set sensor = printer['gcode_macro _SENSOR_VARIABLES'] %} 
    M118 "Auto unload filament"
    AUTO_FILAMENT_UNLOAD
    M118 Load new filament! Wait until is loaded, then "AUTO_LOAD_FILAMENT".  
    M117 Load new filament! Wait until is loaded, then "AUTO_LOAD_FILAMENT".  
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0 # swicth off heater
    UPDATE_DELAYED_GCODE ID=clear_loadbusy DURATION=2.5 # timing must be set to clear delay plus 0.5s. is due to wait to remove filament before starting load even in case there is a blob at the tip of the extracted filament which woudl trigger the sensor twice

#################################################################################################################

[gcode_macro AUTO_LOAD_FILAMENT]
gcode:
  {% set sensor = printer['gcode_macro _SENSOR_VARIABLES'] %}
    {% if(sensor.disable_autoload|lower == 'false') %}
      filament_load
    {% else %}
      M118 Filament auto-load is disabled in the sensor config file! Use "filament_load"
      M117 Filament auto-load is disabled in the sensor config file! Use "filament_load"
    {% endif %} 
  

[gcode_macro filament_load]
variable_loadbusy: 0
variable_USER_TEMP: 0
variable_LOAD_TEMP: 0
gcode:   
    {% if (printer.print_stats.state != "printing") %}
    {% set sensor = printer['gcode_macro _SENSOR_VARIABLES'] %}
    # {% if loadbusy == 0 %} # requires [virtual_sdcard] 
      SET_GCODE_VARIABLE MACRO=filament_load VARIABLE=loadbusy VALUE=1
      SET_GCODE_VARIABLE MACRO=filament_unload VARIABLE=unloadbusy VALUE=1    
      {% set USER_TEMP = printer.extruder.target %} # save user set temperature before loading
      {% set LOAD_TEMP = 0 %} 
      #M118 USER TEMP {USER_TEMP}      # echo back for debug only      
      #M117 USER TEMP {USER_TEMP}      # echo back for debug only      
        {% if (printer.extruder.can_extrude|lower != 'true') or (printer.extruder.target < sensor.filament_load_min_temp) %} # checking for minimum extrusion temperature
        # check if temperature is over the minimum extrusion temp. min_extrude_temp must be defined in the extruder config (to about 185)                        
          SET_HEATER_TEMPERATURE HEATER=extruder TARGET={sensor.filament_load_temp} # set user defined load temperature
          {% set LOAD_TEMP = sensor.filament_load_temp %} # save user set temperature before loading           
         M118 Hotend heating! 
         M117 Hotend heating! 
      {% endif %}     
    {% if (sensor.enable_beep|lower == 'true') %} 
      M300 # beep sound
    {% endif %}
    M118 Filament loading!  
    M117 Filament loading!  
    M82           #set extruder to absolute mode
    G92 E0
    G4 P1500        # wait for 1.5 seconds
    FORCE_MOVE STEPPER=extruder DISTANCE=15 VELOCITY=10 ACCEL=1000  # load filament inside the gears force move needs to be enabled    
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={LOAD_TEMP} # wait for reaching set temperature    
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={USER_TEMP} # wait for reaching set temperature    
    G1 E{sensor.nozzle_purge_length} F{sensor.nozzle_purge_speed} # extrude preconfigured purge length
    M400 # wait to complete nozzle purge
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={USER_TEMP} # restore user temp if it was set before loading
    M118 Filament load complete!    
    M117 Filament load complete!    
    UPDATE_DELAYED_GCODE ID=clear_unloadbusy DURATION=2   
    # {% else %}
      # M118 Filament already loaded!    
      # M117 Filament already loaded!    
    # {% endif %}
    {% else %}    
    M118 Printing! Can't load filament right now!    
    M117 Printing! Can't load filament right now!    
    {% endif %} 
    SET_GCODE_VARIABLE MACRO=filament_unload VARIABLE=filamentpresent VALUE=1
    UPDATE_DELAYED_GCODE ID=clear_changebusy DURATION=2  

    
#############################################END filament suto load macro section END***********************************************************
#############################################filament auto unload macro section*****************************************************************
[gcode_macro AUTO_FILAMENT_UNLOAD]
gcode:
  {% set sensor = printer['gcode_macro _SENSOR_VARIABLES'] %}
    {% if(sensor.disable_autounload|lower == 'false') %}
      filament_unload
    {% else %}
      M118 Filament auto-unload is disabled in the sensor config file!   
      M117 Filament auto-unload is disabled in the sensor config file!   
    {% endif %} 
  

[gcode_macro filament_unload] 
variable_unloadbusy: 0
variable_filamentpresent: 0
gcode:
    {% if (printer.print_stats.state != "printing") %}
    {% set sensor = printer['gcode_macro _SENSOR_VARIABLES'] %}
  # {% if unloadbusy == 0 %} # requires [virtual_sdcard]  
      SET_GCODE_VARIABLE MACRO=filament_unload VARIABLE=unloadbusy VALUE=1
      SET_GCODE_VARIABLE MACRO=filament_load VARIABLE=loadbusy VALUE=1
      {% if (sensor.enable_beep|lower == 'true') %} 
        M300 # beep sound
      {% endif %}
      M118 Starting filament_unload macro
      M117 Starting filament_unload macro
      M83
      G92 E0 
      {% if (printer.extruder.can_extrude|lower != 'true') or (printer.extruder.target == 0)%} # checing for minimum extrusion temperature
        # check if temperature is over the minimum extrusion temp. min_extrude_temp must be defined in the extruder config (to about 185)
        M118 Temp too low to unload. Temp will set to {sensor.filament_unload_temp} (filament_unload_temp)
        M117 Temp too low to unload. Temp will set to {sensor.filament_unload_temp} (filament_unload_temp)
        SET_HEATER_TEMPERATURE HEATER=extruder TARGET={sensor.filament_unload_temp} # restore user temp if it was set before loading
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={sensor.filament_unload_temp} # wait for reaching configured unload temperature
      {% else %}
        M118 Extruder can extrude.
      {% endif %}
      {% if(printer.extruder.target == 0) %} # checing for set temperature if is zero than set to filament_unload_temp / hotend hot but cooling due to set target temp 0
        M118 Target temp is 0, so Temp will set to {sensor.filament_unload_temp} (filament_unload_temp)
        SET_HEATER_TEMPERATURE HEATER=extruder TARGET={sensor.filament_unload_temp} # restore user temp if it was set before loading
      {% endif %}
      M118 Extrude 20mm before extracting
      M117 Extrude 20mm before extracting
      G0 E10 F500 # extruder 20mm of filament before extracting 
      M118 Extract filament to cold end
      M117 Extract filament to cold end
      G0 E-5 F3600 	#extract filament to cold end
      G4 P2000 # wait for two seconds
      M118 Push the filament back 
      M117 Push the filament back 
      G0 E6 F3600 # push the filament back 
      M118 Extract filament to cold end
      M117 Extract filament to cold end
      G0 E-10 F3600 	#extract filament to cold end
      M118 Extraction by {sensor.unload_distance} mm
      M117 Extraction by {sensor.unload_distance} mm
      G0 E-{sensor.unload_distance} F300	# continue extraction slow allow filament to be cooled enough before reaches the gears  
      M400 # wait to complete unload
      M118 Turning Off Heater
      M117 Turning Off Heater
      M104 S0 T0 
            M118 Filament unload complete!      
      M117 Filament unload complete!      
      #SET_GCODE_VARIABLE MACRO=filament_load VARIABLE=loadbusy VALUE=0     
    # {% else %}      
      # M118 Nothing to unload!
      # M117 Nothing to unload!
    # {% endif %}
    {% else %}   
      M118 Printing! Can't unload filament right now!
      M117 Printing! Can't unload filament right now!
    {% endif %}

#############################################END filament auto unload macro section END***********************************************************

[delayed_gcode clear_attempts]
gcode:
    SET_GCODE_VARIABLE MACRO=_ATTEMPTS_VARIABLES VARIABLE=attempts VALUE=1
    #M118 Clear Unload busy! 
    
[delayed_gcode clear_unloadbusy]
gcode:
  SET_GCODE_VARIABLE MACRO=filament_unload VARIABLE=unloadbusy VALUE=0
  #M118 Clear Unload busy! 

[delayed_gcode clear_changebusy]   # Reset to 0 changebusy,  ff changebusy = 0 -> Printer is ready, else is busy.
gcode:
  SET_GCODE_VARIABLE MACRO=filament_change_state1 VARIABLE=changebusy VALUE=0
  #M118 Clear Load busy!  

[delayed_gcode set_loadbusy]
gcode:
  SET_GCODE_VARIABLE MACRO=filament_load VARIABLE=loadbusy VALUE=1
  #M118 Set Load busy! 

[delayed_gcode clear_loadbusy]  # Reset to 0 loadbusy, if loadbusy > 0 -> Load/Unload is already execute
gcode:
  SET_GCODE_VARIABLE MACRO=filament_load VARIABLE=loadbusy VALUE=0
  #M118 Clear Load busy!  
